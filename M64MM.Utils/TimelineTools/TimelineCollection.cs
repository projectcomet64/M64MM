using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Keyshift.Core.Classes;

namespace M64MM.Utils.TimelineTools {
    public class TimelineCollection {
        private Dictionary<string, TimelineInfo> _timelines = new Dictionary<string, TimelineInfo>();

        public ReadOnlyDictionary<string, TimelineInfo> Timelines =>
            new ReadOnlyDictionary<string, TimelineInfo>(_timelines);

        public event EventHandler<KeyValuePair<string, TimelineInfo>> TimelineAdded;
        public event EventHandler<KeyValuePair<string, TimelineInfo>> TimelineRemoved;

        /// <summary>
        /// Adds a Timeline. Its ID is autogenerated from the name given.
        /// </summary>
        /// <param name="name">The descriptive name to give the timeline.</param>
        /// <param name="timeline">The actual Timeline to add.</param>
        /// <returns>The key for the timeline. Null if it already existed.</returns>
        public string AddTimeline(string name, Timeline timeline) {
            timeline.Fps = 30;
            string key = name.ToLower().Replace(" ", "-");
            if (_timelines.ContainsKey(key)) return null; // Exists and will not be replaced
            TimelineInfo ti = AddTimelineNoCheck(key, name, timeline);
            TimelineAdded?.Invoke(this, new KeyValuePair<string, TimelineInfo>(key,ti));
            return key;
        }

        /// <summary>
        /// Removes a Timeline.
        /// </summary>
        /// <param name="id">The ID of the timeline to remove.</param>
        public void RemoveTimeline(string id)
        {
            if (!_timelines.ContainsKey(id)) return; // Does not exist and just gets out
            TimelineInfo ti = _timelines[id];
            TimelineRemoved?.Invoke(this, new KeyValuePair<string, TimelineInfo>(id, ti));
            _timelines.Remove(id);
        }

        TimelineInfo AddTimelineNoCheck(string id, string name, Timeline timeline) {
            TimelineInfo ti = new TimelineInfo(name, timeline);
            if (_timelines.ContainsKey(id)) {
                _timelines[id] = ti;
                return ti;
            }
            _timelines.Add(id, ti);
            return ti;
        }
    }
}